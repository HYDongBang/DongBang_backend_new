generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model prisma_migrations {
  applied_steps_count Int       @default(0)
  checksum            String
  finished_at         DateTime?
  id                  String    @id
  logs                String?
  migration_name      String
  rolled_back_at      DateTime?
  started_at          DateTime  @default(dbgenerated())

  @@map("_prisma_migrations")
}

model roomtouser {
  A Int
  B Int

  @@index([B], name: "_RoomToUser_B_index")
  @@map("_roomtouser")
  @@unique([A, B], name: "_RoomToUser_AB_unique")
}

model answer {
  answerId      Int    @default(autoincrement()) @id
  applicationId Int
  content       String
}

model application {
  applicationId Int      @default(autoincrement()) @id
  clubId        Int
  createdAt     DateTime @default(dbgenerated())
  userId        Int
}

model club {
  clubBio         String @default("")
  clubId          Int    @default(autoincrement()) @id
  clubImage       String @default("https://3.bp.blogspot.com/-qtEejOg1NHA/Xobmg2y_QeI/AAAAAAAAIVE/UFKPvpeHjKUqCEFOX8lT4MsKz-PwpEGJgCLcBGAsYHQ/s1600/default_user.png")
  clubName        String
  description     String @default("")
  logoImage       String @default("https://3.bp.blogspot.com/-qtEejOg1NHA/Xobmg2y_QeI/AAAAAAAAIVE/UFKPvpeHjKUqCEFOX8lT4MsKz-PwpEGJgCLcBGAsYHQ/s1600/default_user.png")
  masterId        Int?   @default(0) @unique
  type            String @default("")
  user_clubTouser user?  @relation(fields: [masterId], references: [userId])
  user_clubmember user[] @relation("clubmember", references: [userId])
}

model clubaddinfo {
  clubAddInfoId   Int     @default(autoincrement()) @id
  clubId          Int     @unique
  clubPhoneNumber String
  email           String
  isUnion         Boolean @default(false)
  numberOfMembers Int
  party           Boolean @default(false)
  partyDay        String
  socialUrl       String
}

model message {
  createdAt DateTime @default(dbgenerated())
  fromId    Int
  messageId Int      @default(autoincrement()) @id
  roomId    Int
  text      String
  toId      Int
}

model option {
  content    String
  optionId   Int    @default(autoincrement()) @id
  questionId Int
}

model post {
  clubId    Int
  content   String
  createdAt DateTime @default(dbgenerated())
  file      String
  postId    Int      @default(autoincrement()) @id
  title     String
  type      String
  updatedAt DateTime @default(dbgenerated())
  userId    Int
}

model question {
  clubId     Int
  content    String
  questionId Int    @default(autoincrement()) @id
  type       String
}

model room {
  roomId Int @default(autoincrement()) @id
}

model user {
  auth              Boolean @default(false)
  email             String  @default("") @unique
  encryptedPassword String  @default("")
  major             String  @default("")
  studentNumber     String  @default("")
  university        String  @default("")
  userId            Int     @default(autoincrement()) @id
  userName          String  @default("")
  userPhoneNumber   String  @default("")
  club_clubTouser   club?
  club_clubmember   club[]  @relation("clubmember", references: [clubId])
}